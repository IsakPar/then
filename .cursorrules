# üé≠ Last Minute Live - Cursor Rules & Project Patterns

## üö® **CRITICAL WORKFLOW RULES**

### **ALWAYS TEST LOCALLY BEFORE PUSHING**
```bash
# MANDATORY before any git push:
pnpm run build          # Test Next.js build
docker build . --no-cache  # Test Docker build (if applicable)

# Only push if both succeed:
git add .
git commit -m "..."
git push origin main
```

### **DEPLOYMENT PIPELINE**
- Railway auto-deploys from `main` branch
- PostgreSQL, Redis, MongoDB all hosted on Railway
- Production URL: `https://then-production.up.railway.app`
- Always verify APIs work in production after deployment

---

## üì± **iOS APP ARCHITECTURE PATTERNS**

### **SwiftUI ViewModels**
```swift
// ‚úÖ CORRECT: ObservableObject with @Published
class SeatMapViewModel: ObservableObject {
    @Published var selectedSeats: [Seat] = []
    @Published var totalPrice: Int = 0
    @Published var isLoading = false
    
    // Business logic here, NOT in views
    func selectSeat(_ seat: Seat) { }
    func calculateTotal() { }
}

// ‚ùå WRONG: Business logic in views
struct SeatMapView: View {
    var body: some View {
        Button {
            // ‚ùå Don't put business logic here
            calculatePrice()
            updateDatabase()
        }
    }
}
```

### **API Service Pattern**
```swift
// ‚úÖ Use this pattern for all API services
class ShowsService: ObservableObject {
    @Published var shows: [Show] = []
    @Published var isLoading = false
    
    private let baseURL = "https://then-production.up.railway.app"
    
    func loadShows() async {
        isLoading = true
        defer { isLoading = false }
        
        // API call logic
    }
}
```

### **Navigation Pattern**
```swift
// ‚úÖ CORRECT: NavigationView with proper flow
ContentView ‚Üí ShowCard ‚Üí SeatMapView ‚Üí PaymentView ‚Üí SuccessView ‚Üí ContentView
//                                                                    ‚Üë
//                                                    Done button should go here

// ‚ùå WRONG: Success page going back to SeatMapView
```

---

## üóÑÔ∏è **DATABASE PATTERNS**

### **Hybrid Architecture**
- **PostgreSQL**: Users, bookings, payments, pricing, availability
- **MongoDB**: Seat map layouts, complex JSON structures
- **Redis**: Session management, seat reservations (15min holds)

### **Schema Field Names (PostgreSQL)**
```typescript
// ‚úÖ CORRECT field names from schema.ts:
bookings.customerEmail      // NOT userEmail
bookings.totalAmountPence   // NOT totalPricePence  
bookings.validationCode     // NOT qrCode
shows.date                  // NOT showDate
shows.time                  // NOT showTime

// Junction table for seats:
bookingSeats.bookingId
bookingSeats.seatId
bookingSeats.pricePaidPence
```

### **API Endpoint Patterns**
```typescript
// ‚úÖ CORRECT patterns:
/api/shows                  // Dynamic show loading
/api/user/bookings?email=   // Booking history  
/api/seatmap/init-hamilton  // MongoDB initialization
/api/seatmap/phantom-hybrid // Hybrid MongoDB+PostgreSQL
/api/payment-intent-mongo   // MongoDB seat booking
```

---

## üéØ **SEAT MAPPING SYSTEMS**

### **Show Type Detection**
```typescript
// Auto-detect seat map type:
const seatMapType = 
  title.includes('hamilton') ? 'mongodb' : 
  title.includes('phantom') ? 'hybrid' : 'standard';

// iOS config:
ios_config: {
  api_endpoint: seatMapType === 'mongodb' ? '/api/payment-intent-mongo' : 
               seatMapType === 'hybrid' ? '/api/seatmap/phantom-hybrid' : 
               '/api/payment-intent',
  booking_flow: seatMapType
}
```

### **Hardcoded Seat ID Patterns**
```typescript
// Hamilton (MongoDB): "premium-A-1", "mezzanine-B-5"
// Phantom (Hybrid): "orchestra-premium-A-1", "circle-rear-E-10"
// Format: {section}-{row}-{number}
```

---

## üîß **COMMON ISSUES & SOLUTIONS**

### **Payment Confirmation Issues**
```swift
// ‚ùå PROBLEM: Shows price ¬£0.00 and no seats
// ‚úÖ SOLUTION: Pass actual data to confirmation
struct PaymentConfirmation {
    let totalPrice: Int        // In pence, e.g. 8500 = ¬£85.00
    let selectedSeats: [String] // ["A-1", "A-2"]
    let showTitle: String
    let showDate: String
}
```

### **Navigation Flow Issues**  
```swift
// ‚ùå PROBLEM: Success page goes back to seat map
// ‚úÖ SOLUTION: Use proper navigation dismissal
@Environment(\.presentationMode) var presentationMode

Button("Done") {
    // Dismiss all sheets and go to root
    presentationMode.wrappedValue.dismiss()
    // Or use NavigationView with .navigationViewStyle()
}
```

### **MongoDB Collection Issues**
```bash
# ‚úÖ Initialize collections after MongoDB setup:
curl -X POST .../api/seatmap/init-hamilton -d '{"show": "hamilton"}'
curl -X POST .../api/seatmap/init-hamilton -d '{"show": "phantom"}'

# ‚úÖ Verify collections exist:
curl -X GET .../api/seatmap/init-hamilton?show=phantom
```

---

## üé® **UI/UX PATTERNS**

### **Error Handling**
```swift
// ‚úÖ Always show user-friendly errors
@State private var errorMessage: String?

// In async functions:
catch {
    await MainActor.run {
        errorMessage = "Failed to load shows. Please try again."
    }
}
```

### **Loading States**
```swift
// ‚úÖ Always provide loading feedback
@State private var isLoading = false

if isLoading {
    ProgressView("Loading shows...")
} else {
    // Content here
}
```

---

## üîê **SECURITY PATTERNS**

### **Environment Variables**
```bash
# Railway Production:
DATABASE_URL=postgresql://...
MONGODB_URI=mongodb://...
REDIS_URL=redis://...
STRIPE_SECRET_KEY=sk_live_...
```

### **CORS Headers**
```typescript
// ‚úÖ Add for iOS app compatibility:
headers: {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, x-user-email',
}
```

---

## üìã **TESTING CHECKLIST**

### **Before Every Commit**
- [ ] `pnpm run build` succeeds locally
- [ ] No TypeScript errors
- [ ] APIs tested with curl locally (if applicable)
- [ ] iOS app compiles without errors (if changed)

### **After Deployment**
- [ ] Test all modified API endpoints
- [ ] Verify database changes applied
- [ ] Test iOS app against production APIs
- [ ] Check Railway logs for errors

### **End-to-End Testing**
- [ ] Complete booking flow: Select seats ‚Üí Pay ‚Üí Success ‚Üí Tickets tab
- [ ] Dynamic show loading works
- [ ] New shows appear without app update
- [ ] Payment confirmation shows correct data

---

## üöÄ **DEPLOYMENT TARGETS**

### **Staging/Development**
- Local: `http://localhost:3000`
- Test APIs with real Railway database

### **Production**  
- Railway: `https://then-production.up.railway.app`
- iOS App connects to production APIs
- All payment processing is live

---

## üìö **KEY FILES TO UNDERSTAND**

### **Backend**
- `src/lib/db/schema.ts` - Database schema (CRITICAL for field names)
- `src/app/api/shows/route.ts` - Dynamic show loading
- `src/app/api/user/bookings/route.ts` - Booking history
- `src/lib/mongodb/seatmap-service.ts` - MongoDB operations

### **iOS App**
- `LML/LML/LML/views/ViewModels/SeatMapViewModel.swift` - Core booking logic
- `LML/LML/LML/views/Templates/HamiltonSeatMapView.swift` - Hamilton UI
- Payment flows and navigation controllers

### **Configuration**
- `TODO.md` - Current priorities and known issues
- `package.json` - Dependencies and scripts
- Railway environment variables

---

## ‚ö†Ô∏è **KNOWN GOTCHAS**

1. **Database Schema**: Always check `schema.ts` for exact field names
2. **MongoDB vs PostgreSQL**: Different shows use different systems
3. **Seat ID Formats**: Hardcoded IDs vary by show/venue
4. **iOS Navigation**: Success pages must go to main page, not seat map
5. **Price Display**: Always in pence in database, convert to pounds for display
6. **CORS**: Required for iOS app API calls
7. **Railway Deployment**: Auto-deploys on main branch push

---

## üéØ **SUCCESS METRICS**

- Users can book tickets and see them in Tickets tab
- Adding new shows doesn't require app updates  
- Payment confirmation shows correct price and seats
- Navigation flows logically (Success ‚Üí Main page)
- All seat maps render correctly across different shows
- Performance: <2s API response, <3s seat map rendering

---

> **Remember**: Always follow the "test locally first" rule - it's there because we learned it the hard way! üß™‚úÖ 